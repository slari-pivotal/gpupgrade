8-14-18
=======
1. Prep for the demo

   - Good build of GPDB, up and running

   Build source cluster (4)
   --------------------
   cd ~/workspace
   cd gpdb4
   git checkout 43_STABLE
   git clean -xfd
   git submodule update --init --recursive
   sudo mkdir /usr/local/4
   sudo chown pivotal:staff /usr/local/4
   ./configure 'CFLAGS=-O0' '--enable-snmp' '--enable-gphdfs' '--with-pgport=5432' '--with-libedit-preferred' 'MACOSX_DEPLOYMENT_TARGET=' '--with-perl' '--with-python' '--with-openssl' '--with-pam' '--with-krb5' '--with-ldap' '--enable-cassert' '--enable-debug' '--enable-testutils' '--enable-debugbreak' '--enable-depend' '--prefix=/usr/local/4' '--with-includes=/usr/local/opt/openssl/include' '--with-libs=/usr/local/opt/openssl/lib' '--disable-orca'
   make
   make install
   source /usr/local/gpdb6/greenplum_path.sh
   make -C gpAux/gpdemo
   source ~/workspace/gpdb4/gpAux/gpdemo/gpdemo-env.sh


   Build target cluster (5)
   --------------------
   Open another terminal and proceed as below.

   cd ~/workspace
   cd gpdb5
   git checkout -b dev/debug_pg_upgrade_5X jchampio/dev/debug_pg_upgrade_5X
   git clean -xfd
   git submodule update --init --recursive
   sudo mkdir /usr/local/5
   sudo chown pivotal:staff /usr/local/5
   ./configure --prefix=/usr/local/5 --enable-debug --disable-gpfdist --enable-depend --enable-gpperfmon --disable-pxf CC="ccache gcc" CFLAGS=-O0 CXXFLAGS=-O0 CPPFLAGS=-O0
   make
   make install
   source /usr/local/5/greenplum_path.sh
   make -C gpAux/gpdemo
   source ~/workspace/gpdb4/gpAux/gpdemo/gpdemo-env.sh
   gpdeletesystem


   Good build of gpupgrade
   -----------------------
   Open another terminal and proceed as below.

   cd ~/go/src/github.com/greenplum-db/gpupgrade #assume git clone has been done
   git checkout slari-pivotal/gpugrade-demo
   make

   source /usr/local/4/greenplum_path.sh
   source ~/workspace/4/gpAux/gpdemo/gpdemo-env.sh
   # assuming the 4 demo cluster is running
   make install

   Create a database and its objects for upgrade
   ---------------------------------------------

   In the gpdb4 tab run:
   $ make -C gpAux/gpdemo clean
   $ make -C gpAux/gpdemo

   In the gpupgrade tab run
   Run ./demo/reset_demo.sh

2. Demo the upgrade

   - Intro by Scott - brief architecture overview
   - Issue some command to demonstrate our version of GPDB, and the source
     database

psql -d postgres -f demo/info.sql

   - Upgrade the cluster

gpupgrade prepare init --old-bindir "$SOURCE_GPHOME"/bin --new-bindir "$TARGET_GPHOME"/bin

gpupgrade prepare start-hub
gpupgrade status upgrade

gpupgrade check config
gpupgrade check version
gpupgrade check seginstall

gpupgrade status upgrade

gpupgrade prepare start-agents
gpupgrade status upgrade

gpupgrade prepare init-cluster
watch gpupgrade status upgrade

gpupgrade prepare shutdown-clusters
watch gpupgrade status upgrade

gpupgrade upgrade convert-master
watch gpupgrade status upgrade

gpupgrade upgrade share-oids
watch gpupgrade status upgrade

gpupgrade upgrade convert-primaries
watch gpupgrade status upgrade

gpupgrade upgrade validate-start-cluster
watch gpupgrade status upgrade

   - Look at upgraded cluster

psql -p 15433 -d postgres -f demo/info.sql

3. Discussion
   - How to make sure GPDB changes do not break gupgrade?
   - How to verify that a customer's multi-TB cluster is upgraded correctly?


---
resource_types:
- name: gcs
  type: docker-image
  source:
    repository: frodenas/gcs-resource

- name: slack-notification
  type: docker-image
  source:
    repository: cfcommunity/slack-notification-resource
    tag: latest

- name: terraform
  type: docker-image
  source:
    repository: ljfranklin/terraform-resource
    tag: 0.11.14

resources:
- name: gpupgrade_src
  type: git
  source:
    uri: {{gpupgrade-git-remote}}
    branch: {{gpupgrade-git-branch}}

- name: gpdb_src
  type: git
  source:
    uri: https://github.com/greenplum-db/gpdb
    branch: master

- name: bats
  type: git
  source:
    uri: https://github.com/bats-core/bats-core
    branch: master
    tag_filter: v1.*

- name: slack-alert
  type: slack-notification
  source:
    url: {{cm_webhook_url}}

- name: bin_gpdb6_centos6
  type: gcs
  source:
    bucket: {{gcs-bucket}}
    json_key: {{concourse-gcs-resources-service-account-key}}
    regexp: server/published/gpdb6/server-rc-(.*)-rhel6_x86_64.debug.tar.gz

- name: bin_gpdb5_centos6
  type: s3
  source:
    access_key_id: {{bucket-access-key-id}}
    bucket: {{gpdb-stable-builds-bucket-name}}
    region_name: {{aws-region}}
    secret_access_key: {{bucket-secret-access-key}}
    versioned_file: release_candidates/bin_gpdb_centos6/gpdb5/bin_gpdb.tar.gz

- name: ccp_src
  type: git
  source:
    branch: {{ccp-git-branch}}
    private_key: {{ccp-git-key}}
    uri: {{ccp-git-remote}}

- name: terraform
  type: terraform
  source:
    env:
      AWS_ACCESS_KEY_ID: {{tf-machine-access-key-id}}
      AWS_SECRET_ACCESS_KEY: {{tf-machine-secret-access-key}}
      GOOGLE_CREDENTIALS: {{google-service-account-key}}
    vars:
      project_id: {{google-project-id}}
    storage:
      access_key_id: {{tf-machine-access-key-id}}
      secret_access_key: {{tf-machine-secret-access-key}}
      region_name: {{aws-region}}
      # This is not parameterized, on purpose. All tfstates will go to this spot,
      # and different teams will place there clusters' tfstate files under different paths
      bucket: gpdb5-pipeline-dynamic-terraform
      bucket_path: clusters-google/

- name: icw_gporca_centos6_dump
  type: s3
  source:
    access_key_id: {{bucket-access-key-id}}
    bucket: {{test-data-bucket-name}}
    secret_access_key: {{bucket-secret-access-key}}
    region_name: {{aws-region}}
    versioned_file: gpdb6/icw_gporca_centos6/dump.sql.xz

- name: icw_gporca_centos6_dump5_simple
  type: gcs
  source:
    bucket: cm-dev-ci-testing
    json_key: {{google-service-account-key}}
    versioned_file: gpdb5_simple/dump.sql.xz

jobs:
- name: build
  plan:
  - get: gpupgrade_src
    trigger: true
  - task: build
    file: gpupgrade_src/ci/tasks/build.yml
    on_failure:
      do:
      - *slack_alert

- name: noinstall-tests
  plan:
  - aggregate:
    - get: gpupgrade_src
      trigger: true
    - get: bats
  - task: noinstall-tests
    file: gpupgrade_src/ci/tasks/noinstall-tests.yml
    on_failure:
      do:
      - *slack_alert

- name: install-tests
  plan:
  - aggregate:
    - get: gpupgrade_src
      trigger: true
    - get: gpdb_src
    - get: bats
    - get: bin_gpdb
      resource: bin_gpdb6_centos6
      trigger: true
  - task: install-tests
    file: gpupgrade_src/ci/tasks/install-tests.yml
    on_failure:
      do:
      - *slack_alert

- name: 5-to-6
  ensure:
    <<: *set_failed
  on_success:
    <<: *ccp_destroy
  plan:
  - aggregate:
    - get: gpdb_src
    - get: gpupgrade_src
      trigger: true
    - get: bin_gpdb6_centos6
      trigger: true
    - get: bin_gpdb5_centos6
      trigger: true
    - get: icw_gporca_centos6_dump5_simple
    - get: ccp_src
  - put: terraform
    params:
      <<: *ccp_default_params
      vars:
        instance_type: n1-standard-2
        number_of_nodes: 2
  - task: gen_cluster
    file: ccp_src/ci/tasks/gen_cluster.yml
    params:
      <<: *ccp_gen_cluster_default_params
      PLATFORM: centos6
    input_mapping:
      gpdb_binary: bin_gpdb5_centos6
  - task: set_gpinitsystem_config
    file: gpdb_src/concourse/tasks/set_gpinitsystem_config.yml
    params:
      GPINITSYSTEM_CONFIG: gpdb_src/concourse/scripts/configurations/pg_upgrade_gpinitsystem_config
  - task: gpinitsystem
    file: ccp_src/ci/tasks/gpinitsystem.yml
    # todo: we can remove this once we fix the issue
  - task: move_and_restart_old_gpdb 
    file: gpupgrade_src/ci/tasks/move-and-restart-old-gpdb.yml
    params:
      GPHOME_OLD: /usr/local/greenplum-db-old
  - task: gpdb_install_new
    file: gpupgrade_src/ci/tasks/install-gpdb.yml
    input_mapping:
      bin_gpdb_new: bin_gpdb6_centos6
    params:
      TARBALL_DIR: bin_gpdb_new
  - task: cluster-upgrade
    file: gpupgrade_src/ci/tasks/cluster-upgrade.yml
    params:
      GPHOME_OLD: /usr/local/greenplum-db-old
      GPHOME_NEW: /usr/local/greenplum-db
    input_mapping:
      sqldump: icw_gporca_centos6_dump5_simple
      bin_gpdb: bin_gpdb5_centos6
    on_failure:
      do:
      - *slack_alert
  ensure:
    <<: *set_failed
  on_success:
    <<: *ccp_destroy

- name: 6-to-6
  plan:
  - aggregate:
    - get: gpupgrade_src
      trigger: true
    - get: gpdb_src
    - get: bin_gpdb
      resource: bin_gpdb6_centos6
      trigger: true
    - get: ccp_src
    # FIXME: this is not guaranteed to be the same dump generated by the above
    # binary...
    - get: icw_gporca_centos6_dump
  - put: terraform
    params:
      <<: *ccp_default_params
      vars:
        instance_type: n1-standard-2
        number_of_nodes: 4
        PLATFORM: centos6
  - task: gen_cluster
    file: ccp_src/ci/tasks/gen_cluster.yml
    params:
      <<: *ccp_gen_cluster_default_params
      PLATFORM: centos6
    input_mapping:
      gpdb_binary: bin_gpdb
  - task: gpinitsystem
    file: ccp_src/ci/tasks/gpinitsystem.yml
  - task: cluster-upgrade
    file: gpupgrade_src/ci/tasks/cluster-upgrade.yml
    params:
      GPHOME_OLD: /usr/local/greenplum-db-devel
      GPHOME_NEW: /usr/local/greenplum-db-devel
    input_mapping: {sqldump: icw_gporca_centos6_dump}
    on_failure:
      do:
      - *slack_alert
  ensure:
    <<: *set_failed
  on_success:
    <<: *ccp_destroy

anchors:
- &ccp_default_params
  action: create
  delete_on_failure: true
  generate_random_name: true
  terraform_source: ccp_src/google/

- &ccp_gen_cluster_default_params
  AWS_ACCESS_KEY_ID: {{tf-machine-access-key-id}}
  AWS_SECRET_ACCESS_KEY: {{tf-machine-secret-access-key}}
  AWS_DEFAULT_REGION: {{aws-region}}
  BUCKET_PATH: clusters-google/
  BUCKET_NAME: {{tf-bucket-name}}
  CLOUD_PROVIDER: google

- &ccp_destroy
  put: terraform
  params:
    action: destroy
    env_name_file: terraform/name
    terraform_source: ccp_src/google/
    vars:
      aws_instance-node-instance_type: t2.micro #t2.micro is ignored in destroy, but aws_instance-node-instance_type is required.
      aws_ebs_volume_type: standard
  get_params:
    action: destroy

- &set_failed
  do:
  - task: on_failure_set_failed
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: pivotaldata/ccp
          tag: "7"
      inputs:
        - name: ccp_src
        - name: terraform
      run:
        path: 'ccp_src/google/ccp_failed_test.sh'
      params:
        GOOGLE_CREDENTIALS: {{google-service-account-key}}
        GOOGLE_PROJECT_ID: {{google-project-id}}
        GOOGLE_ZONE: {{google-zone}}
        GOOGLE_SERVICE_ACCOUNT: {{google-service-account}}
        AWS_ACCESS_KEY_ID: {{tf-machine-access-key-id}}
        AWS_SECRET_ACCESS_KEY: {{tf-machine-secret-access-key}}
        AWS_DEFAULT_REGION: {{tf-machine-region}}
        BUCKET_PATH: clusters-google/
        BUCKET_NAME: {{tf-bucket-name}}

- &slack_alert
  put: slack-alert
  params:
    text: |
      Hey team, <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|gpupgrade/$BUILD_JOB_NAME> failed.
